Lean development The lean methodology is focused on the development of low budget software that is change-tolerant. Adapted from lean manufacturing, it maximises resources by developing software with one-third the trio of funds, human efforts and production time. The workflow of lean is minimal and all forms of excesses such as meetings, documentation and so on are cut.  Benefits  Considerations  Extreme programming Extreme programming or XP also refers to agile methodology. The main aim of this model is to create a fully-functional product and cut the cost of software non-essentialities. It is a perfect fit for complex projects with fixed deadlines and not clearly determined requirements. Continuous planning and testing are one of the core principles here. Extreme programming is most suitable for creating software in an unstable environment. This method gives the provision for developers to deliver a final product at a lower cost. At the same time, it is time-consuming with a lot of human effort due to the frequent meetings, test-driven approach, and pair programming.  Benefits  Considerations  Waterfall model With its introduction in 1970 by Dr. Winston W. Royce, the waterfall is the most traditional methodology in the IT industry. It is a classic approach and a very popular version of the system development life cycle in software engineering. The project goals are pre-defined for each development phase. It is linear in nature with all projects progressing in stages. The completion of one stage precedes the other. This methodology is rigid because once a stage is complete, no reversible changes can be made based on new requirements.  Benefits  Considerations  Prototype model The strength of prototype methodology is that it caters for all the lapses of the software engineering process. According to this model, developers initially make a prototype of the software solution. They visualise how it will run and prove its function to investors or clients. The developers subsequently make all the needed modifications in readiness for developing the final application. This approach gives room for understanding the requirements of software development and conducting useful business analysis.  Benefits  Considerations  